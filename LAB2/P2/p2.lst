     1                                  ;[(a-d)+b]*2/c      a,b,c,d-byte
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 0A                          a db 10
    16 00000001 05                          b db 5
    17 00000002 0B                          c db 11
    18 00000003 04                          d db 4
    19                                      
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; [(a-d)+b]*2/c     (10-4+5)*2/11=11*2/11=2
    25 00000000 A0[00000000]                    mov AL,[a]
    26 00000005 2A05[03000000]                  sub AL,[d]  ;AL=a-d
    27 0000000B 0205[01000000]                  add AL,[b]  ;AL=(a-d)+b
    28 00000011 B302                            mov BL,2
    29 00000013 F6E3                            mul BL      ;AX=[(a-d)+b]*2
    30 00000015 8A1D[02000000]                  mov BL,[c]
    31 0000001B F6F3                            div BL      ;AX=[(a-d)+b]*2/c (AL=[(a-d)+b]*2/c, AH=[(a-d)+b]*2%C)
    32                                          ;FINAL RESULT is stored in AX (AL-quotient and AH-remainder)
    33                                      
    34                                          ; exit(0)
    35 0000001D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 0000001F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
