     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; sum of even elements
    14 00000000 010203040506070809-         s1 db 1,2,3,4,5,6,7,8,9,10
    14 00000009 0A                 
    15                                      lens1 equ $-s1
    16 0000000A 02                          two db 2
    17 0000000B 00                          sum db 0
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B300                            mov bl,0
    24 00000002 B90A000000                      mov ecx,lens1   ;number of steps of loop - ECX; we need the number of steps to be the length
    25 00000007 BE00000000                      mov esi,0
    26 0000000C E31C                            jecxz skip_loop
    27                                          sum_loop:
    28 0000000E 8A86[00000000]                      mov al,[s1+esi] ;s1[esi]
    29 00000014 B400                                mov ah,0 ;al->ax unsigned
    30 00000016 F635[0A000000]                      div byte [two] ;al=ax/2 ah=ax%2
    31 0000001C 80FC00                              cmp ah,0       ;check if even/odd
    32 0000001F 7506                                jne do_not_add ;jump over the add if its odd
    33 00000021 029E[00000000]                      add bl,[s1+esi]
    34                                              do_not_add:
    35 00000027 46                                  inc esi
    36 00000028 E2E4                            loop sum_loop
    37                                          skip_loop:
    38 0000002A 881D[0B000000]                  mov [sum],bl
    39                                          
    40                                          ; exit(0)
    41 00000030 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000032 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
