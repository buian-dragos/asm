     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll             ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 
    14 00000000 4F5051525354555657-         new_alphabet db "OPQRSTUVWXYZABCDEFGHIJKLMN",0
    14 00000009 58595A414243444546-
    14 00000012 4748494A4B4C4D4E00 
    15 0000001B 616E616172656D6572-         anamere db "anaaremere",0
    15 00000024 6500               
    16 00000026 257300                      format db "%s",0
    17                                  
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B90A000000                      mov ecx,10
    24 00000005 BE[1B000000]                    mov esi,anamere
    25 0000000A BF[1B000000]                    mov edi,anamere
    26                                          
    27                                          .change_loop:
    28 0000000F B800000000                          mov eax,0
    29 00000014 AC                                  lodsb
    30 00000015 89C2                                mov edx,eax
    31 00000017 83EA61                              sub edx,'a'
    32 0000001A 8B82[00000000]                      mov eax,[new_alphabet + edx]
    33 00000020 AA                                  stosb
    34 00000021 E2EC                            loop .change_loop
    35                                          
    36 00000023 68[1B000000]                    push dword anamere
    37 00000028 68[26000000]                    push dword format
    38 0000002D FF15[00000000]                  call [printf]
    39                                      
    40                                          ; exit(0)
    41 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
