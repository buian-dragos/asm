     1                                  ;Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the elements of A in reverse order.
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 0201FD00                    A db  2, 1, -3, 0
    17                                      lenA equ $-A
    18 00000004 040507060201                B db 4, 5, 7, 6, 2, 1
    19                                      lenB equ $-B
    20 0000000A 00<rept>                    R times (lenA+lenB) db 0
    21                                      lenR equ $-R
    22                                  
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the elements of A in reverse order.
    28                                          
    29 00000000 B906000000                      mov ecx,lenB ;we need to add the elemnt of B in reverse order first
    30 00000005 E31A                            jECXz skipLoop
    31 00000007 BF00000000                      mov edi,0
    32 0000000C BE06000000                      mov esi,lenB
    33                                          elementsB:
    34 00000011 4E                                  dec esi
    35 00000012 8A86[04000000]                      mov al,[B+esi]
    36 00000018 8887[0A000000]                      mov [R+edi],al ;the loop takes the elements of B in reverse order
    37 0000001E 47                                  inc edi
    38 0000001F E2F0                            loop elementsB
    39                                          skipLoop:
    40                                          
    41 00000021 B904000000                      mov ecx,lenA ;we need to add the elemnt of A in reverse order
    42 00000026 E31A                            jECXz skip_loop
    43 00000028 BF06000000                      mov edi,lenB
    44 0000002D BE04000000                      mov esi,lenA
    45                                          elementsA:
    46 00000032 4E                                  dec esi
    47 00000033 8A86[00000000]                      mov al,[A+esi]
    48 00000039 8887[0A000000]                      mov [R+edi],al ;the loop takes the elements of A in reverse order
    49 0000003F 47                                  inc edi
    50 00000040 E2F0                            loop elementsA
    51                                          skip_loop:
    52                                          ;string R now has the elementf of B in reverse + the elements of A in reverse - 
    53                                          
    54                                          ; exit(0)
    55 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
